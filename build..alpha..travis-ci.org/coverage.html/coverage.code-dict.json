{"/home/travis/build/npmtest/node-npmtest-cli-weather/test.js":"/* istanbul instrument in package npmtest_cli_weather */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-weather/lib.npmtest_cli_weather.js":"/* istanbul instrument in package npmtest_cli_weather */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cli_weather = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cli_weather = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-weather/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cli-weather && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cli_weather */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cli_weather\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cli_weather.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cli_weather.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cli_weather.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cli_weather.__dirname + '/lib.npmtest_cli_weather.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/index.js":"","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/tools/Args.js":"/**\n * Created by apizzimenti on 1/2/17.\n */\n\n/**\n * @module tools\n */\n\nvar paramExist = require(\"./Globals\").paramExist,\n    Error = require(\"./Error\").Error;\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Maps the argstring's properties based on the config object's options.\n *\n * @param {object} args An argstring.\n * @param {object} config Specified desired property names and their possible parameters in the argstring.\n *\n * @class {object} Args\n *\n * @property {object} args An argstring.\n * @property {object} config Specified desired property names and their possible parameters in the argstring.\n */\nfunction Args (args, config) {\n    \n    if (paramExist(args, \"object\")) {\n        this.args = args;\n    } else {\n        this.args = {};\n    }\n    \n    if (paramExist(config, \"object\")) {\n        this.config = config;\n    } else {\n        this.config = {};\n    }\n    \n    this._configure();\n}\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc For each argument and argument list in the property config, see if any exist in the argstring; if so, create a\n * new property with the desired name in the flattened object, and break.\n *\n * @property {object} flattened Properties from the argstring mapped to the provided property names in the config.\n *\n * @this Args\n *\n * @method\n * @private\n *\n * @returns {undefined}\n */\nArgs.prototype._configure = function () {\n    \n    var name,\n        arg,\n        i;\n    \n    this.flattened = {};\n    \n    // for each argument in the config object,\n    for (arg in this.config) {\n        \n        if (this.config.hasOwnProperty(arg)) {\n            \n            // take its list of properties,\n            for (i = 0; i < this.config[arg].length; i++) {\n                \n                name = this.config[arg][i];\n                \n                // and if any of them exist on the argstring, apply that property to flatten, but hash it with the\n                // desired property name from the config object.\n                \n                if (this.args[name]) {\n                    this.flattened[arg] = this.args[name];\n                    break;\n                }\n            }\n        }\n    }\n};\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Return the desired property value if it exists; otherwise return null.\n *\n * @param {string} arg The property to search for.\n *\n * @this Args\n *\n * @returns {object | undefined} Property value or throws an error and returns nothing.\n */\nArgs.prototype.get = function (arg) {\n    \n    var msg = \"No argument supplied.\",\n        e = new Error(msg);\n    \n    if (paramExist(arg, \"string\")) {\n        return this.flattened[arg] ? this.flattened[arg] : null;\n    } else {\n        e.throw();\n    }\n};\n\nmodule.exports = {\n    Args: Args\n};\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/tools/Globals.js":"/**\n * Created by apizzimenti on 1/1/17.\n */\n\n/**\n * @module tools\n */\n\nvar Error = require(\"./Error\").Error,\n    \n    chalk = require(\"chalk\");\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Checks to see if a function parameter exists and typechecks it.\n *\n * @param {*} param Parameter to check.\n * @param {*} type The type the input parameter *should* be.\n *\n * @returns {boolean} Was this parameter passed to the function and, if it was, is its expected type correct?\n */\nfunction paramExist (param, type) {\n    return typeof param == type && param !== undefined && param !== null;\n}\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc A Location object used to group data from a call to the google geocode or geoip api.\n *\n * @param {object} location Location data.\n *\n * @class Location\n *\n * @constructor\n *\n * @see tools~apply\n */\nfunction Location (location) {\n    \n    if (paramExist(location, \"object\")) {\n        apply(location, this);\n    }\n}\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc A Weather object used to group data from a call to the DarkSky.net forecast api.\n *\n * @param {object} w Weather data.\n *\n * @class Weather\n *\n * @constructor\n *\n * @see apply\n */\nfunction Weather (w) {\n    \n    if (paramExist(w, \"object\")) {\n        apply(w, this);\n    }\n}\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Maps top-level properties from one object to another.\n *\n * @param {object} give The object translating its properties.\n * @param {object} receive The object receiving the translated properties.\n *\n * @returns {undefined}\n */\nfunction apply (give, receive) {\n    \n    for (var prop in give) {\n        if (give.hasOwnProperty(prop)) {\n            receive[prop] = give[prop];\n        }\n    }\n}\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Transforms a UNIX timestring into a human-readable timestamp or datestamp.\n *\n * @param {number | string} timestring UNIX timestring; number of nanoseconds since the epoch.\n * @param {boolean} includeDay Should this function add the month and day to the timestamp?\n *\n * @returns {string} Timestring; if includeDay is true, the day and month are included as well.\n */\nfunction realTime (timestring, includeDay) {\n    \n    var date = new Date(timestring * 1000),\n        hours = date.getHours(),\n        minutes = date.getMinutes(),\n        month = null,\n        day = null,\n        suffix = \"\";\n    \n    suffix = hours > 12 ? \"pm\" : \"am\";\n    hours = hours > 12 ? hours - 12 : hours;\n    minutes = minutes > 10 ? minutes : \"0\" + minutes;\n    \n    if (includeDay) {\n        \n        switch (date.getMonth()) {\n            \n            case 0:\n                month = \"January\";\n                break;\n                \n            case 1:\n                month = \"February\";\n                break;\n                \n            case 2:\n                month = \"March\";\n                break;\n                \n            case 3:\n                month = \"April\";\n                break;\n                \n            case 4:\n                month = \"May\";\n                break;\n                \n            case 5:\n                month = \"June\";\n                break;\n                \n            case 6:\n                month = \"July\";\n                break;\n                \n            case 7:\n                month = \"August\";\n                break;\n            \n            case 8:\n                month = \"September\";\n                break;\n                \n            case 9:\n                month = \"October\";\n                break;\n                \n            case 10:\n                month = \"November\";\n                break;\n                \n            case 11:\n                month = \"December\";\n                break;\n        }\n        \n        day = date.getDate();\n        \n    }\n    \n    return (month ? month  + \" \" : \"\") + (day ? day + \" \" : \"\") + hours + \":\" + minutes + suffix;\n}\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Decides if the temperature is below zero and adjusts its color accordingly.\n *\n * @param {number} temp Temperature.\n * @param {string} units Celsius or Farenheit units of measurement.\n *\n * @throws Error\n *\n * @returns {string} Temperature; blue if it's below freezing, red if it's above.\n */\nfunction hotCold (temp, units) {\n    \n    var t,\n        e = new Error();\n    \n    if (paramExist(temp, \"number\")) {\n        t = units ? 0 : 32;\n        return temp > t ? chalk.red(temp) : chalk.blue(temp);\n    }\n    \n    e.message = \"The temperature parameter does not exist.\";\n    e.throw();\n}\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Centers all tabular content. Ease-of-use method for using cli-table2.\n *\n * @param {string | *} content Content to be positioned in the table.\n *\n * @returns {{content: *, hAlign: string}} Object containing the data to be aligned and the way it should be aligned.\n */\nfunction tableContent (content) {\n    \n    return {\n        content: content,\n        hAlign: \"center\"\n    };\n}\n\n\nmodule.exports = {\n    paramExist: paramExist,\n    Location: Location,\n    Weather: Weather,\n    realTime: realTime,\n    hotCold: hotCold,\n    tableContent: tableContent\n};\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/tools/Error.js":"/**\n * Created by apizzimenti on 1/1/17.\n */\n\n/**\n * @module tools\n */\n\nvar cols = process.stdout.columns,\n    chalk = require(\"chalk\"),\n    wrap = require(\"wordwrap\")(4, cols),\n    pkg = require(\"../../package.json\");\n    \n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc This class throws well-formatted errors and exits out of the current process peacefully.\n *\n * @param {string} [message=\"\"] Message to be displayed when the error is thrown.\n *\n * @property {string} message Message to be displayed when the error is thrown.\n *\n * @class Error\n *\n * @constructor\n */\nfunction Error (message) {\n    \n    if (typeof message == \"string\" && message !== undefined && message !== null) {\n        this.message = message;\n    } else {\n        this.message = \"\";\n    }\n}\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Displays error message and issue url, then quits the current process.\n *\n * @this Error\n *\n * @returns {undefined}\n */\nError.prototype.throw = function () {\n    \n    console.log();\n    console.log(wrap(chalk.bold.red(\"Error:\") + \"\\n\" + chalk.red(this.message)));\n    console.log();\n    console.log(wrap(chalk.bold(\"If you feel that this is an error in the application's programming and not with your\" +\n        \" internet connection, please submit an issue ticket at \" + pkg.bugs.url)));\n    console.log();\n    \n    process.exit(0);\n};\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Returns the message assigned to the Error object.\n *\n * @this Error\n *\n * @returns {string} Message assigned to this Error object.\n */\nError.prototype.message = function () {\n    return this.message;\n};\n\nmodule.exports = {\n    Error: Error\n};\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/tools/Files.js":"/**\n * Created by apizzimenti on 1/2/17.\n */\n\n/**\n * @module tools\n */\n\nvar fs = require(\"fs\"),\n    chalk = require(\"chalk\"),\n    \n    Error = require(\"./Error\").Error,\n    paramExist = require(\"./Globals\").paramExist,\n    status = require(\"./Status\").status,\n    \n    filename = \"/config.json\";\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Writes data to the config file; if the file exists but does not have proper permissions, an error is thrown.\n *\n * @function write\n *\n * @param {string} [file=__dirname + \"/config.json\"] Filepath to be written to.\n * @param {string} [data=\"{}\"] Data to write to the file.\n *\n * @throws Error\n *\n * @returns {undefined}\n */\nfunction write (file, data) {\n    \n    var f = paramExist(file, \"string\") ? file : __dirname + filename,\n        d = paramExist(data, \"object\") ? JSON.stringify(data) : \"{}\",\n        e = new Error();\n\n    fs.writeFile(f, d, function (err) {\n    \n        if (err) {\n            e.message = f + \" couldn't be written to - \" + chalk.bgWhite.black(\"sudo\") + \" may be needed to\" +\n                \" execute the save command, but \" + chalk.bgWhite.black(\"sudo\") + \" must be run each time presets are\" +\n                \" saved. You can also run\\n\\n\" + chalk.black.bold(\"\\t sudo chmod 747 \" + __dirname.split(\"/\").slice(0, -2).join(\"/\") + \"/\")\n                + \"\\n\\nto change the read/write/execute permissions in the directory where cli-weather is stored.\";\n            e.throw();\n        }\n    \n        status(f + \" was written to successfully.\", true);\n    });\n}\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Async reads from a file; if no data is present, it returns an empty object; if the file doesn't exist, it returns\n * null.\n *\n * @param {string} [file=__dirname + \"/config.json\"] Filepath to read from.\n *\n * @see Args\n *\n * @returns {object | null} Data read from file as JSON or an empty object.\n */\nfunction read (file) {\n    \n    var f = paramExist(file, \"string\") ? file : __dirname + filename,\n        data;\n    \n    if (fs.existsSync(f)) {\n        \n        data = fs.readFileSync(f, { encoding: \"utf8\" });\n        \n        if (data) {\n            return JSON.parse(data);\n        } else {\n            return {};\n        }\n        \n    } else {\n        return null;\n    }\n}\n\nmodule.exports = {\n    write: write,\n    read: read\n};\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/tools/Status.js":"/**\n * Created by apizzimenti on 1/2/17.\n */\n\n/**\n * @module tools\n */\n\nvar paramExist = require(\"./Globals\").paramExist,\n    Error = require(\"./Error\").Error,\n    \n    chalk = require(\"chalk\");\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Displays a status message and ends the current process.\n *\n * @param {string} message Message to be displayed.\n * @param {boolean | null} [bad=null] If this parameter exists and is true, the message will be displayed in green. If\n * it is false or does not exist, the message is displayed in red.\n *\n * @throws Error\n *\n * @returns {undefined}\n */\nfunction status (message, bad) {\n    \n    var e = new Error();\n    \n    if (paramExist(message, \"string\")) {\n        \n        if (bad) {\n            console.log(chalk.green(\"✓ \" + message));\n        } else {\n            console.log(chalk.red(\"✗ \" + message));\n        }\n    } else {\n        e.message = \"No status message was provided.\";\n        e.throw();\n    }\n}\n\nmodule.exports = {\n    status: status\n};\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/tools/Help.js":"/**\n * Created by apizzimenti on 1/2/17.\n */\n\n/**\n * @module tools\n */\n\nvar chalk = require(\"chalk\"),\n    open = require(\"open\"),\n    \n    paramExist = require(\"./Globals\").paramExist;\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Displays help information.\n *\n * @param {string} title Package title.\n * @param {string} description Package description.\n * @param {string} version Current package version.\n * @param {object} args Argument description object.\n *\n * @property {string} [title=\"\"] Package title.\n * @property {string} [desc=\"\"] Package description.\n * @property {string} [version=\"\"] Current package version.\n * @property {object} [args={}] Argument description object.\n *\n * @class Help\n *\n * @constructor\n */\nfunction Help (title, description, version, args) {\n    \n    if (paramExist(args, \"object\")) {\n        this.args = args;\n    } else {\n        this.args = {};\n    }\n    \n    if (paramExist(description, \"string\")) {\n        this.desc = description;\n    } else {\n        this.desc = \"\";\n    }\n    \n    if (paramExist(title, \"string\")) {\n        this.title = title;\n    } else {\n        this.title = \"\";\n    }\n    \n    if (paramExist(version, \"string\")) {\n        this.version = version;\n    } else {\n        this.version = \"\";\n    }\n}\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Generates a helpstring based on the properties provided in the argument configuration object.\n *\n * @returns {string} Formatted string containing help information.\n * @private\n */\nHelp.prototype._createHelpString = function () {\n    \n    var helpstring = \"\\n\",\n        key,\n        value,\n        arg;\n    \n    for (arg in this.args) {\n        \n        if (this.args.hasOwnProperty(arg)) {\n            \n            key = arg;\n            value = this.args[arg];\n            \n            helpstring += \"\\t\" + chalk.dim(key) + \" → \" + (key.length > 4 ? \"\\t\" : \"\\t\\t\") + value + \"\\n\";\n        }\n    }\n    \n    open(\"https://apizzimenti.github.io/cli-weather-docs/\");\n    return helpstring;\n};\n\n/**\n * @author Anthony Pizzimenti\n *\n * @description Displays helpstring and exits current process.\n *\n * @returns {undefined}\n */\nHelp.prototype.display = function () {\n    \n    var _this = this;\n    \n    console.log(\"\\n\" + chalk.bold.underline(_this.title + \" v\" + _this.version));\n    console.log(_this.desc);\n    console.log(_this._createHelpString());\n    \n    process.exit(0);\n};\n\nmodule.exports = {\n    Help: Help\n};\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/weather/Config.js":"/**\n * Created by apizzimenti on 1/2/17.\n */\n\n/**\n * @module weather\n */\n\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Organizes and creates the Help object, Args object, checks if help is requested, and starts the chain of callbacks.\n *\n * @see Data\n * @see tools\n * @see Args\n * @see write\n * @see status\n * @see Help\n *\n * @returns {undefined}\n */\nfunction config_weather () {\n    \n    var weather = require(\"./Data\"),\n        tools = require(\"../tools\"),\n        pkg = require(\"../../package.json\"),\n        dir = __dirname + \"/config.json\",\n        \n        min = require(\"minimist\")(process.argv.slice(1)),\n        chalk = require(\"chalk\"),\n        \n        help = tools.Help,\n        Args = tools.Args,\n        write = tools.write,\n        read = tools.read,\n        \n        // creates a new Help object\n        Help = new help(\n            \"cli-weather\",\n            \"Retrieves weather for your current location or an input location.\",\n            pkg.version,\n            {\n                \"celsius\": \"-c | --celsius → Change all units to si units (Celsius degrees/meters per second).\",\n                \"canada\": \"--can → Change all units to Canadian units (Celsius degrees/kilometers per second).\",\n                \"help\": \"-h | --help → Display this help page.\",\n                \"address\": \"-a | --address → Retrieve the weather for the provided location.\",\n                \"lat/long\": \"-a | --address → Retrieve the weather for the provided coordinates.\",\n                \"zip\": \"-z | --zip → Retrieve the weather for the provided zip code.\",\n                \"verbose\": \"-v | --verbose → Show status messages while retrieving your weather.\",\n                \"save\": \"-s | --save → Save the current options as defaults.\",\n                \"clear\": \"--clear → Clear the current default options.\",\n                \"key\": \"-k | --key → Use your own DarkSky api key which will be used for all requests.\",\n                \"clearkey\": \"--clearkey → Clear the saved DarkSky api key.\"\n            }\n        ),\n        \n        args,\n        auto,\n        prop,\n        \n        // reads saved data from config file\n        re = read(dir, min);\n        \n    if (min.s || min.save) {\n        \n        min.s ? delete min.s : delete min.save;\n        re.args = min;\n\n        if (min.k || min.key) {\n            re.key = min.k ? min.k : min.key;\n            re.args.key ? delete re.args.key : delete re.args.k;\n        }\n        \n        write(dir, re);\n        \n    } else if (min.clear) {\n        re.args = {};\n        write(dir, re);\n    } else if (min.clearkey) {\n        re.key = {};\n        write(dir, re);\n    }\n    \n    min = Object.assign(re.args || {}, min);\n    min.key = re.key;\n    \n    // create new Args object for easy argstring reference\n    args = new Args(min, {\n        \"address\": [\"a\", \"address\"],\n        \"help\": [\"h\", \"help\"],\n        \"celsius\": [\"c\", \"celsius\"],\n        \"zip\": [\"z\", \"zip\"],\n        \"verbose\": [\"v\", \"verbose\"],\n        \"save\": [\"s\", \"save\"],\n        \"canada\": [\"can\"],\n        \"clear\": [\"clear\"],\n        \"key\": [\"k\", \"key\"],\n        \"clearkey\": [\"clearkey\"]\n    });\n    \n    // if there's a provided address or zip code, automatically retrieve location\n    auto = !(args.get(\"address\") || args.get(\"zip\"));\n    \n    if (args.get(\"help\")) {\n        Help.display();\n    }\n    \n    if (args.get(\"verbose\")) {\n        \n        console.log();\n        console.log(chalk.bold.underline(\"cli-weather v\" + pkg.version));\n        console.log();\n        \n        for (prop in args.flattened) {\n            if (prop != \"key\") {\n                console.log(`${prop} = ${typeof args.get(prop) === \"string\" ? args.get(prop) : \"true\"}`);\n            }\n        }\n        \n        console.log();\n    }\n    \n    if (auto) {\n        weather.ip(args, weather.ip_location);\n    } else if (!auto) {\n        weather.p_location(args, weather.weather);\n    }\n}\n\nmodule.exports = {\n    config_weather: config_weather\n};\n","/home/travis/build/npmtest/node-npmtest-cli-weather/node_modules/cli-weather/lib/weather/Output.js":"/**\n * Created by apizzimenti on 1/1/17.\n */\n\n/**\n * @module weather\n */\n\nvar paramExist = require(\"./../tools/Globals\").paramExist,\n    Error = require(\"./../tools/Error\").Error,\n    realTime = require(\"./../tools/Globals\").realTime,\n    hotCold = require(\"./../tools/Globals\").hotCold,\n    tc = require(\"./../tools/Globals\").tableContent,\n    \n    wrap = require(\"wordwrap\")(4, process.stdout.columns),\n    chalk = require(\"chalk\"),\n    Table = require(\"cli-table2\");\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Object dedicated to collecting, organizing, and printing data.\n *\n * @param {Location} location Location object.\n * @param {Weather}weather {Weather} Weather object.\n * @param {Args} args {Args} Args object.\n *\n * @property {Location} location Location object.\n * @property {Weather} weather Weather object.\n * @property {Args} args Args object.\n * @property {object[]} alerts NOAA alerts for the given location.\n * @property {object} currently Current weather report.\n * @property {object[]} daily Weather reports for today through three days from now.\n *\n * @class Object\n *\n * @see Weather\n * @see Location\n * @see Args\n * @see prettyprint\n *\n * @constructor\n */\nfunction Output (location, weather, args) {\n    \n    var e = new Error(\"\");\n    \n    if (paramExist(location, \"object\")) {\n        this.location = location;\n    } else {\n        e.message = \"The location parameter does not exist.\";\n        e.throw();\n        return;\n    }\n    \n    if (paramExist(weather, \"object\")) {\n        this.weather = weather;\n    } else {\n        e.message = \"The weather parameter does not exist.\";\n        e.throw();\n        return;\n    }\n    \n    if (paramExist(args, \"object\")) {\n        this.args = args;\n    } else {\n        e.message = \"The args parameter does not exist.\";\n        e.throw();\n        return;\n    }\n    \n    this.alerts = this.weather.alerts ? this.weather.alerts : [];\n    this.currently = this.weather.currently;\n    this.daily = this.weather.daily.data.slice(0, this.weather.daily.data.length - 4);\n}\n\n/**\n * @author Anthony Pizzimenti\n * @desc Prints out the header containing the city/county and region information.\n *\n * @this Output\n *\n * @method\n *\n * @returns {undefined}\n */\nOutput.prototype.header = function () {\n    \n    var city = this.location.city,\n        state = this.location.region_name;\n    \n    console.log(chalk.underline(\"\\nCurrent conditions for \" + city + \", \" + state + \":\"));\n};\n\n/**\n * @author Anthony Pizzimenti\n * @desc Prints the current conditions in the city/county.\n *\n * @see hotCold\n * @see Args\n *\n * @this Output\n * @method\n *\n * @returns {undefined}\n */\nOutput.prototype.current = function () {\n    \n    var c = this.currently,\n        summary = c.summary.toLowerCase(),\n        feels = hotCold(Math.round(c.apparentTemperature), this.args.get(\"celsius\") || this.args.get(\"canada\")),\n        temp = hotCold(Math.round(c.temperature), this.args.get(\"celsius\") || this.args.get(\"canada\")),\n        wind = Math.round(c.windSpeed),\n        wind_unit = \" mph \";\n    \n    if (this.args.get(\"celsius\")) {\n        wind_unit = \" mps \";\n    } else if (this.args.get(\"canada\")) {\n        wind_unit = \" kph \";\n    }\n    \n    console.log(temp + \"° • feels like \" + feels + \"° • \" + wind + wind_unit + \"wind • \" + summary + \"\\n\");\n};\n\n/**\n * @author Anthony Pizzimenti\n * @desc Collects information from each day's weather report's icon property, which contains a short description of the\n * weather conditions for the day.\n *\n * @see tableContent\n *\n * @this Output\n * @method\n *\n * @returns {undefined}\n */\nOutput.prototype.icons = function () {\n    \n    var _this = this,\n        i;\n    \n    this.icons = [];\n    \n    this.daily.forEach(function (day) {\n        \n        var icon = day.icon;\n        \n        switch (icon) {\n            case \"clear-day\":case \"clear-night\":\n                _this.icons.push(\"☀ clear\");\n                break;\n                \n            case \"rain\":\n                _this.icons.push(\"☂ rain\");\n                break;\n                \n            case \"snow\":\n                _this.icons.push(\"❄ snow\");\n                break;\n                \n            case \"sleet\":\n                _this.icons.push(\"☂❄ sleet\");\n                break;\n                \n            case \"wind\":\n                _this.icons.push(\"➳ wind\");\n                break;\n                \n            case \"fog\":\n                _this.icons.push(\"☁ fog\");\n                break;\n                \n            case \"partly-cloudy-day\":case \"partly-cloudy-night\":\n                _this.icons.push(\"☁☀ partly cloudy\");\n                break;\n                \n            default:\n                _this.icons.push(\"☁ clouds\");\n                break;\n        }\n    });\n    \n    for (i = 0; i < this.icons.length; i++) {\n        this.icons[i] = tc(this.icons[i]);\n    }\n};\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Aggregates data from each dataset into ordered arrays.\n *\n * @this Output\n * @method\n *\n * @returns {undefined}\n */\nOutput.prototype.data = function () {\n    \n    var _this = this,\n        temps = \"\";\n    \n    this.days = [];\n    this.temps = [];\n    this.precip = [];\n    this.sunrise = [];\n    this.sunset = [];\n    \n    this.daily.forEach(function (day) {\n        \n        _this.days.push(tc(new Date(day.time * 1000).toDateString()));\n        \n        temps = chalk.bold(hotCold(Math.round(day.temperatureMax), _this.args.get(\"celsius\") || _this.args.get(\"canada\")))\n            + \"° \" + chalk.dim(hotCold(Math.round(day.temperatureMin), _this.args.get(\"celsius\") || _this.args.get(\"canada\"))) + \"°\";\n        _this.temps.push(tc(temps));\n        \n        _this.precip.push(tc(Math.round(day.precipProbability * 100, 2) + \"% chance precip\"));\n        _this.sunrise.push(tc(chalk.yellow(\"☀\") + \" \" + realTime(day.sunriseTime)));\n        _this.sunset.push(tc(chalk.blue(\"☾\") + \" \" + realTime(day.sunsetTime)));\n    });\n};\n\n/**\n * @author Anthony Pizzimenti\n * @desc Collects the current NOAA alerts for the city or region and prints them.\n *\n * @this Output\n * @method\n *\n * @returns {undefined}\n */\nOutput.prototype.warnings = function () {\n    \n    var warnstring = {},\n        warn = {},\n        color = \"\",\n        i,\n        prop;\n    \n    if (this.alerts.length != 0) {\n        \n        console.log();\n    \n        for (i = 0; i < this.alerts.length; i++) {\n    \n            warn = this.alerts[i];\n            color = this._assignWarningColor(warn.title);\n    \n            warnstring.title = chalk.bold(\"Alert: \" + warn.title);\n            warnstring.title += chalk.bold(\" active from \" + realTime(warn.time, true) + \" to \" + realTime(warn.expires, true));\n            warnstring.title = chalk[color](warnstring.title);\n            \n            // if verbose is passed, print out the full text of each alert.\n            if (this.args.get(\"verbose\")) {\n                warnstring.title = chalk.underline(warnstring.title);\n                warnstring.description = wrap(chalk.white(\"\\n\" + warn.description));\n            }\n    \n            for (prop in warnstring) {\n                if (warnstring.hasOwnProperty(prop)) {\n                    console.log(warnstring[prop]);\n                }\n            }\n        }\n    \n        // this is meant to ensure the safety of this app's users.\n        console.log(chalk.bgRed(\"Please visit \" + chalk.bold(\"alerts.weather.gov\") + \" for more information.\"));\n        console.log();\n    }\n};\n\n/**\n * @author Anthony Pizzimenti\n *\n * @desc Picks out the words \"Warning\", \"Watch\", \"Statement\", or \"Emergency\" from the title and assigns a color based on\n * its severity.\n *\n * @param title {string} Title of the alert.\n *\n * @returns {string}\n *\n * @see Output#warnings\n *\n * @private\n *\n * @returns {string} Color based on alert type.\n */\n\nOutput.prototype._assignWarningColor = function (title) {\n    \n    if (title.includes(\"Warning\")) {\n        return \"red\";\n    } else if (title.includes(\"Watch\")) {\n        return \"yellow\";\n    } else if (title.includes(\"Statement\")) {\n        return \"green\";\n    } else if (title.includes(\"Emergency\")) {\n        return \"bgYellow\";\n    } else {\n        return \"white\";\n    }\n};\n\n/**\n * @author Anthony Pizzimenti\n * @desc Calls all the preceding functions to generate the current and tabulated weather.\n *\n * @see header\n * @see current\n * @see icons\n * @see data\n * @see warnings\n * @see prettyprint\n *\n * @this Output\n * @method\n *\n * @returns {undefined}\n */\n\nOutput.prototype.print = function () {\n    \n    this.header();\n    this.current();\n    \n    this.icons();\n    this.data();\n    \n    var _this = this,\n        table = new Table(\n            {\n                colWidths: [20, 20, 20, 20],\n                head: this.days,\n                chars: {\n                    \"mid\": \"\", \"left-mid\": \"\", \"mid-mid\": \"\", \"right-mid\": \"\"\n                },\n                style: {\n                    head: [\"bold\"],\n                    align: [\"center\"]\n                }\n            }\n        );\n    \n    table.push(\n        _this.temps,\n        _this.icons,\n        _this.precip,\n        _this.sunrise,\n        _this.sunset\n    );\n    \n    console.log(table.toString());\n    this.warnings();\n    // credit to DarkSky.net; if I hadn't seen a reddit thread with this api in it last year, this project wouldn't exist\n    console.log(chalk.dim(\"Powered by DarkSky.net\"));\n    console.log();\n    \n    process.exit(0);\n};\n\n\nmodule.exports = {\n    Output: Output\n};\n"}